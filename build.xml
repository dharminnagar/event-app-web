<?xml version="1.0" encoding="UTF-8"?>
<project name="event-aggregator-web" default="deploy" basedir=".">
    
    <!-- Define properties -->
    <property name="src.dir" value="src/main/java"/>
    <property name="resources.dir" value="src/main/resources"/>
    <property name="webapp.dir" value="src/main/webapp"/>
    <property name="build.dir" value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="dist.dir" value="${build.dir}/dist"/>
    <property name="lib.dir" value="lib"/>
    <property name="war.name" value="event-aggregator-web.war"/>

    <!-- GlassFish properties - these will be used only for deployment -->
    <property environment="env"/>
    <property name="glassfish.home" value="/Users/dharmin/Downloads/glassfish7"/>
    <property name="glassfish.domain" value="domain1"/>
    <property name="glassfish.admin.port" value="4848"/>
    <property name="glassfish.admin.user" value="admin"/>
    <property name="glassfish.admin.password" value=""/>

    <!-- Define classpath - ONLY using our downloaded JARs for compilation -->
    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- Clean task -->
    <target name="clean" description="Clean build directories">
        <delete dir="${build.dir}"/>
    </target>

    <!-- Prepare task -->
    <target name="prepare" depends="clean" description="Create build directories">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${lib.dir}"/>
        
        <!-- Download Jakarta EE compatible libraries for GlassFish 7 -->
        <get src="https://repo1.maven.org/maven2/jakarta/servlet/jakarta.servlet-api/5.0.0/jakarta.servlet-api-5.0.0.jar" 
             dest="${lib.dir}/jakarta.servlet-api-5.0.0.jar" 
             skipexisting="true"/>
        <get src="https://repo1.maven.org/maven2/jakarta/servlet/jsp/jstl/jakarta.servlet.jsp.jstl-api/3.0.0/jakarta.servlet.jsp.jstl-api-3.0.0.jar" 
             dest="${lib.dir}/jakarta.servlet.jsp.jstl-api-3.0.0.jar" 
             skipexisting="true"/>
        <get src="https://repo1.maven.org/maven2/org/glassfish/web/jakarta.servlet.jsp.jstl/3.0.1/jakarta.servlet.jsp.jstl-3.0.1.jar" 
             dest="${lib.dir}/jakarta.servlet.jsp.jstl-3.0.1.jar" 
             skipexisting="true"/>
        <get src="https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.28/mysql-connector-java-8.0.28.jar" 
             dest="${lib.dir}/mysql-connector-java-8.0.28.jar" 
             skipexisting="true"/>
        <get src="https://repo1.maven.org/maven2/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar" 
             dest="${lib.dir}/json-simple-1.1.1.jar" 
             skipexisting="true"/>
        <!-- Jakarta XML Binding API -->
        <get src="https://repo1.maven.org/maven2/jakarta/xml/bind/jakarta.xml.bind-api/3.0.0/jakarta.xml.bind-api-3.0.0.jar" 
             dest="${lib.dir}/jakarta.xml.bind-api-3.0.0.jar" 
             skipexisting="true"/>
        
        <!-- Copy GlassFish-specific libraries directly -->
        <copy todir="${lib.dir}" flatten="true" failonerror="false">
            <fileset dir="${glassfish.home}/glassfish/modules">
                <include name="**/jakarta.servlet.jsp.jstl-api.jar"/>
                <include name="**/jakarta.servlet.jsp.jstl.jar"/>
            </fileset>
        </copy>
        
        <!-- Copy from the existing lib directory if available -->
        <copy todir="${lib.dir}" flatten="true" failonerror="false">
            <fileset dir="target/event-aggregator-web/WEB-INF/lib" erroronmissingdir="false">
                <include name="**/mysql-connector-java-*.jar"/>
                <include name="**/json-simple-*.jar"/>
                <include name="**/protobuf-java-*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- Compile task -->
    <target name="compile" depends="prepare" description="Compile source code">
        <!-- Use fork to avoid classpath issues with different Java versions -->
        <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="true" includeantruntime="false" fork="true" encoding="UTF-8">
            <classpath refid="classpath"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <!-- Copy resources -->
        <copy todir="${classes.dir}" failonerror="false">
            <fileset dir="${resources.dir}" erroronmissingdir="false">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <!-- Build task -->
    <target name="build" depends="compile" description="Build WAR file">
        <war destfile="${dist.dir}/${war.name}" webxml="${webapp.dir}/WEB-INF/web.xml">
            <classes dir="${classes.dir}"/>
            <fileset dir="${webapp.dir}">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
            <lib dir="${lib.dir}">
                <!-- Don't include the servlet-api JAR in the WAR file -->
                <exclude name="**/javax.servlet-api-*.jar"/>
                <exclude name="**/javax.servlet.jsp-api*.jar"/>
            </lib>
            <!-- Add the META-INF directory for TLD files -->
            <metainf dir="${webapp.dir}/META-INF" erroronmissingdir="false"/>
        </war>
        <echo message="WAR file built: ${dist.dir}/${war.name}"/>
    </target>

    <!-- Check if GlassFish exists -->
    <target name="check-glassfish">
        <available file="${glassfish.home}/bin/asadmin" property="glassfish.exists"/>
        <fail unless="glassfish.exists" 
              message="GlassFish not found at ${glassfish.home}. Please install GlassFish or update the glassfish.home property."/>
    </target>

    <!-- Deploy task -->
    <target name="deploy" depends="build, check-glassfish, create-password-file" description="Deploy WAR to GlassFish">
        <echo message="Deploying to GlassFish..."/>
        <exec executable="${glassfish.home}/bin/asadmin" failonerror="true">
            <arg value="deploy"/>
            <arg value="--force=true"/>
            <arg value="--name=event-aggregator-web"/>
            <arg value="--contextroot=event-aggregator-web"/>
            <arg value="--user=${glassfish.admin.user}"/>
            <arg value="--passwordfile=${basedir}/password.txt"/>
            <arg value="--port=${glassfish.admin.port}"/>
            <arg value="${dist.dir}/${war.name}"/>
        </exec>
        <echo message="Application deployed successfully."/>
    </target>

    <!-- Undeploy task -->
    <target name="undeploy" depends="check-glassfish" description="Undeploy WAR from GlassFish">
        <echo message="Undeploying from GlassFish..."/>
        <exec executable="${glassfish.home}/bin/asadmin" failonerror="false">
            <arg value="undeploy"/>
            <arg value="--user=${glassfish.admin.user}"/>
            <arg value="--passwordfile=${basedir}/password.txt"/>
            <arg value="--port=${glassfish.admin.port}"/>
            <arg value="event-aggregator-web"/>
        </exec>
        <echo message="Application undeployed successfully."/>
    </target>

    <!-- Redeploy task -->
    <target name="redeploy" depends="undeploy, deploy" description="Redeploy application"/>

    <!-- Build-only task (doesn't require GlassFish) -->
    <target name="build-only" depends="build" description="Build the WAR file without deploying"/>
    
    <!-- Create password file if it doesn't exist -->
    <target name="create-password-file" depends="check-password-file" unless="password.file.exists">
        <echo message="Creating GlassFish password file..."/>
        <echo file="${basedir}/password.txt">AS_ADMIN_PASSWORD=${glassfish.admin.password}</echo>
    </target>
    
    <target name="check-password-file">
        <available file="${basedir}/password.txt" property="password.file.exists"/>
    </target>
</project>